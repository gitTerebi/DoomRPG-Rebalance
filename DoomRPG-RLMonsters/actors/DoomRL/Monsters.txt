// --------------------------------------------------
// STANDARD ENEMIES
//

// Zombieman - Pistol
ACTOR RLFormerHumanPistolRPG : RLFormerHumanPistol Replaces RLFormerHumanPistol
{
	States
	{
	Spawn:
		ZHPI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZHPI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Zombieman - Battle Rifle
ACTOR RLFormerHumanBattleRifleRPG : RLFormerHumanBattleRifle Replaces RLFormerHumanBattleRifle
{
	States
	{
	Spawn:
		ZHRF A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZHRF A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Zombieman - Battle Rifle 2
ACTOR RLFormerHumanBattleRifle2RPG : RLFormerHumanBattleRifle2 Replaces RLFormerHumanBattleRifle2
{
	States
	{
	Spawn:
		ZHR2 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZHR2 A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Zombieman - Battle Rifle 2
ACTOR RLFormerHumanBattleRifle3RPG : RLFormerHumanBattleRifle3 Replaces RLFormerHumanBattleRifle3
{
	States
	{
	Spawn:
		ZHR3 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZHR3 A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Sergeant - Shotgun
ACTOR RLFormerSergeantShotgunRPG : RLFormerSergeantShotgun Replaces RLFormerSergeantShotgun
{
	States
	{
	Spawn:
		ZSSH A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZSSH A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Sergeant - Combat Shotgun
ACTOR RLFormerSergeantCombatShotgunRPG : RLFormerSergeantCombatShotgun Replaces RLFormerSergeantCombatShotgun
{
	States
	{
	Spawn:
		ZSSH A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZSSH A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Commando - Chaingun
ACTOR RLFormerCommandoChaingunRPG : RLFormerCommandoChaingun Replaces RLFormerCommandoChaingun
{
	States
	{
	Spawn:
		ZCCH A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZCCH A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Commando - Battle Rifle
ACTOR RLFormerCommandoBattleRifleRPG : RLFormerCommandoBattleRifle Replaces RLFormerCommandoBattleRifle
{
	States
	{
	Spawn:
		ZCRF A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZCRF A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Captain - Plasma Rifle
ACTOR RLFormerCaptainPlasmaRifleRPG : RLFormerCaptainPlasmaRifle Replaces RLFormerCaptainPlasmaRifle
{
	States
	{
	Spawn:
		ZXPL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZXPL A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Imp
ACTOR RLImpRPG : RLImp Replaces RLImp
{
	States
	{
	Spawn:
		IMP0 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		IMP0 A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Demon
ACTOR RLDemonRPG : RLDemon Replaces RLDemon
{
	States
	{
	Spawn:
		PDEM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		PDEM A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Spectre
ACTOR RLSpectreRPG : RLSpectre Replaces RLSpectre
{
	States
	{
	Spawn:
		SPEC A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		SPEC A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Lost Soul
ACTOR RLLostSoulRPG : RLLostSoul Replaces RLLostSoul
{
	+COUNTKILL

	States
	{
	Spawn:
    	// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	LSOL A 0 NoDelay A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	LSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	LSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
        TNT1 A 0
		Goto Super::Spawn
	See:
    	// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	LSOL A 0 A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	LSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	LSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
        TNT1 A 0
		Goto Super::See
	}
}

ACTOR RLLostSoulPERPG : RLLostSoulPE Replaces RLLostSoulPE
{
	+COUNTKILL

	States
	{
	Spawn:
    	// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	LSOL A 0 NoDelay A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	LSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	LSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::Spawn+5
	See:
    	// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	LSOL A 0 A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	LSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	LSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::See+5
	}
}

// Cacodemon
ACTOR RLCacodemonRPG : RLCacodemon Replaces RLCacodemon
{
	States
	{
	Spawn:
		CACO A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CACO A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Hell Knight
ACTOR RLHellKnightRPG : RLHellKnight Replaces RLHellKnight
{
	States
	{
	Spawn:
		HKNI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		HKNI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Baron of Hell
ACTOR RLBaronOfHellRPG : RLBaronOfHell Replaces RLBaronOfHell
{
	States
	{
	Spawn:
		BARO A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		BARO A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Arachnotron
ACTOR RLArachnotronRPG : RLArachnotron Replaces RLArachnotron
{
	States
	{
	Spawn:
		ARAC A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ARAC A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Pain Elemental
ACTOR RLPainElementalRPG : RLPainElemental Replaces RLPainElemental
{
	States
	{
	Spawn:
		PELE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		PELE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Revenant
ACTOR RLRevenantRPG : RLRevenant Replaces RLRevenant
{
	States
	{
	Spawn:
		REVE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		REVE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Mancubus
ACTOR RLMancubusRPG : RLMancubus Replaces RLMancubus
{
	States
	{
	Spawn:
		MANC A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		MANC A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Arch-Vile
ACTOR RLArchvileRPG : RLArchvile Replaces RLArchvile
{
	States
	{
	Spawn:
		AVIL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AVIL A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cyberdemon
ACTOR RLCyberdemonRPG : RLCyberdemon Replaces RLCyberdemon
{
	States
	{
	Spawn:
		VCYB A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		VCYB A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// Spider Mastermind
ACTOR RLSpiderMastermindRPG : RLSpiderMastermind Replaces RLSpiderMastermind
{
	States
	{
	Spawn:
		SMAS A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		SMAS A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// and it's wreck-your-shit BFG variant
ACTOR RLSpiderMastermindBFGRPG : RLSpiderMastermindBFG Replaces RLSpiderMastermindBFG
{
	States
	{
	Spawn:
		SMAB A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		SMAB A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// SPIDER MASTERMIND (FUSION MORTAR)
ACTOR RLSpiderMastermindMortarRPG : RLSpiderMastermindMortar Replaces RLSpiderMastermindMortar
{
	States
	{
	Spawn:
		SFUM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		TNT1 A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// Agony Elemental
ACTOR RLAgonyElementalRPG : RLAgonyElemental Replaces RLAgonyElemental
{
    States
	{
	Spawn:
		AGON A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		AGON A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// And its' spawns
ACTOR RLPainElementalAgonyRPG : RLPainElementalAgony replaces RLPainElementalAgony
{
	-COUNTKILL

	States
	{
	Spawn:
		PELE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
		Goto Super::Spawn
	See:
		PELE A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
		Goto Super::See
	}
}

ACTOR RLLostSoulAgonyRPG : RLLostSoulAgony replaces RLLostSoulAgony
{
	-COUNTKILL

	States
	{
	Spawn:
		LSOL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
		Goto Super::Spawn
	See:
		LSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
		Goto Super::See
	}
}

// Abominant
ACTOR RLAbominantRPG : RLAbominant Replaces RLAbominant
{
    States
	{
	Spawn:
		ABOM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		ABOM A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// Bruiser Brothers
ACTOR RLBruiserBrotherRPG : RLBruiserBrother replaces RLBruiserBrother
{
	States
	{
	Spawn:
		BBRO A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		BBRO A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

ACTOR RLBruiserBrother2RPG : RLBruiserBrother2 replaces RLBruiserBrother2
{
	States
	{
	Spawn:
		BBRO A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		BBRO A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// --------------------------------------------------
// ELITE ENEMIES
//

// Elite Human - Combat Pistol
ACTOR RLEliteHumanCombatPistolRPG : RLEliteHumanCombatPistol Replaces RLEliteHumanCombatPistol
{
	States
	{
	Spawn:
		ZHPI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZHPI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Human - Handcannon
ACTOR RLEliteHumanHandcannonRPG : RLEliteHumanHandcannon Replaces RLEliteHumanHandcannon
{
	States
	{
	Spawn:
		ZHPI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ZHPI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Human - Battle Rifle
ACTOR RLEliteHumanBattleRifleRPG : RLEliteHumanBattleRifle Replaces RLEliteHumanBattleRifle
{
	States
	{
	Spawn:
		ERFL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ERFL A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Human - Battle Rifle 2
ACTOR RLEliteHumanBattleRifle2RPG : RLEliteHumanBattleRifle2 Replaces RLEliteHumanBattleRifle2
{
	States
	{
	Spawn:
		ERF2 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ERF2 A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Human - Uzi
ACTOR RLEliteHumanUziRPG : RLEliteHumanUzi Replaces RLEliteHumanUzi
{
	States
	{
	Spawn:
		EUZI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		EUZI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Sergeant - Double Shotgun
ACTOR RLEliteSergeantDoubleShotgunRPG : RLEliteSergeantDoubleShotgun Replaces RLEliteSergeantDoubleShotgun
{
	States
	{
	Spawn:
		ESSG A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ESSG A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Sergeant - Assault Shotgun
ACTOR RLEliteSergeantAssaultShotgunRPG : RLEliteSergeantAssaultShotgun Replaces RLEliteSergeantAssaultShotgun
{
	States
	{
	Spawn:
		EASS A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		EASS A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Sergeant - Plasma Shotgun
ACTOR RLEliteSergeantPlasmaShotgunRPG : RLEliteSergeantPlasmaShotgun Replaces RLEliteSergeantPlasmaShotgun
{
	States
	{
	Spawn:
		ESPS A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ESPS A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Commando - Minigun
ACTOR RLEliteCommandoMinigunRPG : RLEliteCommandoMinigun Replaces RLEliteCommandoMinigun
{
	States
	{
	Spawn:
		ECMI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ECMI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Elite Captain - Tristar Blaster
ACTOR RLEliteCaptainTristarBlasterRPG : RLEliteCaptainTristarBlaster Replaces RLEliteCaptainTristarBlaster
{
	States
	{
	Spawn:
		ETRI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ETRI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// --------------------------------------------------
// NIGHTMARE ENEMIES
//

// Nightmare Imp
ACTOR RLNightmareImpRPG : RLNightmareImp Replaces RLNightmareImp
{
	States
	{
	Spawn:
		NIMP A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NIMP A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Demon
ACTOR RLNightmareDemonRPG : RLNightmareDemon Replaces RLNightmareDemon
{
	States
	{
	Spawn:
		NDEM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NDEM A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Spectre
ACTOR RLNightmareSpectreRPG : RLNightmareSpectre Replaces RLNightmareSpectre
{
	States
	{
	Spawn:
		NSPE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NSPE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Lost Soul
ACTOR RLNightmareLostSoulRPG : RLNightmareLostSoul Replaces RLNightmareLostSoul
{
	+COUNTKILL

	States
	{
	Spawn:
		// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	NSOL A 0 NoDelay A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	NSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	NSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	NSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	NSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::Spawn
	See:
		// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	NSOL A 0 A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	NSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	NSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	NSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	NSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::See
	}
}

// Nightmare Cacodemon
ACTOR RLNightmareCacodemonRPG : RLNightmareCacodemon Replaces RLNightmareCacodemon
{
	States
	{
	Spawn:
		NCAC A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NCAC A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Hell Knight
ACTOR RLNightmareHellKnightRPG : RLNightmareHellKnight Replaces RLNightmareHellKnight
{
	States
	{
	Spawn:
		NKNI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NKNI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Baron of Hell
ACTOR RLNightmareBaronOfHellRPG : RLNightmareBaronOfHell Replaces RLNightmareBaronOfHell
{
	States
	{
	Spawn:
		NBAR A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NBAR A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Arachnotron
ACTOR RLNightmareArachnotronRPG : RLNightmareArachnotron Replaces RLNightmareArachnotron
{
	States
	{
	Spawn:
		NARA A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NARA A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Pain Elemental
ACTOR RLNightmarePainElementalRPG : RLNightmarePainElemental Replaces RLNightmarePainElemental
{
	States
	{
	Spawn:
		NELE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NELE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	SoulSpawn:
		NELE BC 5
		NELE D 4 Bright
		TNT1 A 0 A_Jump (180, 3)
		NELE D 1 Bright A_PainAttack ("RLNightmareLostSoulRPG", 0, PAF_NOSKULLATTACK | PAF_AIMFACING)
		TNT1 A 0 A_Jump (256, 2)
		NELE D 1 Bright A_PainAttack ("RLLostSoulRPG", 0, PAF_NOSKULLATTACK | PAF_AIMFACING)
		NELE CB 3 A_Chase ("", "")
		Goto See
	}
}

// Nightmare Revenant
ACTOR RLNightmareRevenantRPG : RLNightmareRevenant Replaces RLNightmareRevenant
{
	States
	{
	Spawn:
		NREV A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NREV A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Mancubus
ACTOR RLNightmareMancubusRPG : RLNightmareMancubus Replaces RLNightmareMancubus
{
	States
	{
	Spawn:
		NMAN A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NMAN A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Arch-Vile
ACTOR RLNightmareArchvileRPG : RLNightmareArchvile Replaces RLNightmareArchvile
{
	States
	{
	Spawn:
		NVIL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		NVIL A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Nightmare Cyberdemon
ACTOR RLNightmareCyberdemonRPG : RLNightmareCyberdemon Replaces RLNightmareCyberdemon
{
	States
	{
	Spawn:
		NCYB A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		NCYB A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// Nightmare Spider Mastermind
ACTOR RLNightmareSpiderMastermindRPG : RLNightmareSpiderMastermind Replaces RLNightmareSpiderMastermind
{
	States
	{
	Spawn:
		NMAS A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		NMAS A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// --------------------------------------------------
// CYBERNETIC ENEMIES
//

// Former Cyborg - Battle Rifle
ACTOR RLFormerCyborgBattleRifleRPG : RLFormerCyborgBattleRifle Replaces RLFormerCyborgBattleRifle
{
	States
	{
	Spawn:
		CRIF A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CRIF A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Imp
ACTOR RLCyberneticImpRPG : RLCyberneticImp Replaces RLCyberneticImp
{
	States
	{
	Spawn:
		CIMP A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CIMP A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Demon
ACTOR RLCyberneticDemonRPG : RLCyberneticDemon Replaces RLCyberneticDemon
{
	States
	{
	Spawn:
		CDEM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CDEM A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Spectre
ACTOR RLCyberneticSpectreRPG : RLCyberneticSpectre Replaces RLCyberneticSpectre
{
	States
	{
	Spawn:
		CSPE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CSPE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Lost Soul
ACTOR RLCyberneticLostSoulRPG : RLCyberneticLostSoul Replaces RLCyberneticLostSoul
{
	+COUNTKILL

	States
	{
	Spawn:
		// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	CSOL A 0 NoDelay A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	CSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	CSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::Spawn
	See:
		// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	CSOL A 0 A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	CSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	CSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::See
	}
}

// Alternate version
ACTOR RLTechnophobiaHellmineRPG : RLTechnophobiaHellmine Replaces RLTechnophobiaHellmine
{
	+COUNTKILL

	States
	{
	Spawn:
		// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	CSOL A 0 NoDelay A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	CSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	CSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::Spawn
	See:
		// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	CSOL A 0 A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	CSOL A 0 A_ChangeFlag("COUNTKILL", false)
    	CSOL A 0 A_Jump(256, 2)
    	// Map-based.
    	CSOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
    	TNT1 A 0
		Goto Super::See
	}
}

// Machine Elemental
ACTOR RLCyberneticPainElementalRPG : RLCyberneticPainElemental Replaces RLCyberneticPainElemental
{
	States
	{
	Spawn:
		CELE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CELE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Hell Knight
ACTOR RLCyberneticHellKnightRPG : RLCyberneticHellKnight Replaces RLCyberneticHellKnight
{
	States
	{
	Spawn:
		CKNI A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CKNI A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Baron of Hell
ACTOR RLCyberneticBaronOfHellRPG : RLCyberneticBaronOfHell Replaces RLCyberneticBaronOfHell
{
	States
	{
	Spawn:
		CBAR A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CBAR A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Arachnotron
ACTOR RLCyberneticArachnotronRPG : RLCyberneticArachnotron Replaces RLCyberneticArachnotron
{
	States
	{
	Spawn:
		CARA A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CARA A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Alternate version
ACTOR RLCyberneticArachnotronGuardRPG : RLCyberneticArachnotronGuard Replaces RLCyberneticArachnotronGuard
{
	States
	{
	Spawn:
		CARA A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA)
		Goto Super::Spawn
	See:
		CARA A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA)
		Goto Super::See
	}
}

// Cybernetic Revenant
ACTOR RLCyberneticRevenantRPG : RLCyberneticRevenant Replaces RLCyberneticRevenant
{
	States
	{
	Spawn:
		CREV A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CREV A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Mancubus
ACTOR RLCyberneticMancubusRPG : RLCyberneticMancubus Replaces RLCyberneticMancubus
{
	States
	{
	Spawn:
		CMAN A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CMAN A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Arch-Vile
// TODO: Steal all your Augs, make people maximum angry
ACTOR RLCyberneticArchvileRPG : RLCyberneticArchvile Replaces RLCyberneticArchvile
{
	States
	{
	Spawn:
		CVIL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		CVIL A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cybernetic Cyberdemon Mk. II
ACTOR RLCyberneticCyberdemonRPG : RLCyberneticCyberdemon Replaces RLCyberneticCyberdemon
{
	States
	{
	Spawn:
		CCYB A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		CCYB A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// Cybernetic Spider Mastermind
ACTOR RLCyberneticSpiderMastermindRPG : RLCyberneticSpiderMastermind Replaces RLCyberneticSpiderMastermind
{
	States
	{
	Spawn:
		CSPM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		CSPM A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// Terminator
ACTOR RLTerminatorRPG : RLTerminator replaces RLTerminator
{
	States
	{
	Spawn:
		TERM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		TERM A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
}

// --------------------------------------------------
// ARMAGEDDON ENEMIES
//

// Former Assault Trooper
ACTOR RLFormerAssaultTrooperRPG : RLFormerAssaultTrooper Replaces RLFormerAssaultTrooper
{
	States
	{
	Spawn:
		AFM1 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AFM1 A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Overwatch
ACTOR RLFormerOverwatchRPG : RLFormerOverwatch Replaces RLFormerOverwatch
{
	States
	{
	Spawn:
		AZSG A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AZSG A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Shocktrooper
ACTOR RLFormerShocktrooperRPG : RLFormerShocktrooper Replaces RLFormerShocktrooper
{
	States
	{
	Spawn:
		ASHK A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ASHK A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Imp
ACTOR RLArmageddonImpRPG : RLArmageddonImp Replaces RLArmageddonImp
{
	Tag "The Watcher"

	States
	{
	Spawn:
		AIMP A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AIMP A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Former Defence Drone
ACTOR RLUACDefenceDroneRPG : RLUACDefenceDrone Replaces RLUACDefenceDrone
{
	States
	{
	Spawn:
		ADRO A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ADRO A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Mech-Strosity
ACTOR RLArmageddonDemonRPG : RLArmageddonDemon Replaces RLArmageddonDemon
{
	States
	{
	Spawn:
		ADEM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ADEM A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Cacobyss
ACTOR RLArmageddonCacodemonRPG : RLArmageddonCacodemon Replaces RLArmageddonCacodemon
{
	States
	{
	Spawn:
		ACAC A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ACAC A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// And it's orb
ACTOR RLCacobyssOrbRPG : RLCacobyssOrb Replaces RLCacobyssOrb
{
	States
	{
	Spawn:
		ACA1 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOSTATS | MF_NOAURA | MF_NODROPS | MF_NOWEAKEN)
		Goto Super::Spawn
	}
}

// The Hungry
ACTOR RLArmageddonLostSoulRPG : RLArmageddonLostSoul Replaces RLArmageddonLostSoul
{
	+COUNTKILL

	States
	{
	Spawn:
    	// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	ASOL A 0 NoDelay A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	ASOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	ASOL A 0 A_ChangeFlag("COUNTKILL", false)
    	ASOL A 0 A_Jump(256, 2)
    	// Map-based.
    	ASOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
        TNT1 A 0
		Goto Super::Spawn
	See:
    	// ----- Lost Souls that are not map-based should not have their kills and XP taken into account due to possible spawn spam (Pain Elementals for example). ----- //
    	// Check if monster is map-based.
    	ASOL A 0 A_JumpIf(GetLevelSpawnTime() == 0, 4)
    	// Not map-based.
    	ASOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOXP | MF_NOAURA | MF_NODROPS)
    	ASOL A 0 A_ChangeFlag("COUNTKILL", false)
    	ASOL A 0 A_Jump(256, 2)
    	// Map-based.
    	ASOL A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_NOAURA | MF_NODROPS)
        TNT1 A 0
		Goto Super::See
	}
}

// Lord of the Abyss
ACTOR RLArmageddonBaronOfHellRPG : RLArmageddonBaronOfHell replaces RLArmageddonBaronOfHell
{
	States
	{
	Spawn:
		ABAR A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ABAR A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Arachnotron
ACTOR RLArmageddonArachnotronRPG : RLArmageddonArachnotron replaces RLArmageddonArachnotron
{
	States
	{
	Spawn:
		AARA A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AARA A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Skull of the Abyss
ACTOR RLSkullOfTheAbyssRPG : RLSkullOfTheAbyss replaces RLSkullOfTheAbyss
{
	States
	{
	Spawn:
		ASKL A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		ASKL A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Hellstorm Elemental
ACTOR RLArmageddonPainElementalRPG : RLArmageddonPainElemental Replaces RLArmageddonPainElemental
{
	States
	{
	Spawn:
		AELE A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AELE A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Revenihilator
ACTOR RLArmageddonRevenantRPG : RLArmageddonRevenant Replaces RLArmageddonRevenant
{
	States
	{
	Spawn:
		AREV A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AREV A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Magmabus
ACTOR RLArmageddonMancubusRPG : RLArmageddonMancubus Replaces RLArmageddonMancubus
{
	States
	{
	Spawn:
		AMAN A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AMAN A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

// Archvile
ACTOR RLArmageddonArchvileRPG : RLArmageddonArchvile Replaces RLArmageddonArchvile
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::Spawn
	See:
		AARA A 0 ACS_NamedExecuteAlways("MonsterInit", 0)
		Goto Super::See
	}
}

/* Cyber-Riftlord
ACTOR RLArmageddonCyberdemonRPG : RLArmageddonCyberdemon Replaces RLArmageddonCyberdemon
{
	States
	{
	Spawn:
		AMAN A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::Spawn
	See:
		AMAN A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS)
		Goto Super::See
	}
} */

// --------------------------------------------------------
// SPECIAL SNOWFLAKES

ACTOR RLNightmareArtifactGuardianRPG : RLNightmareArtifactGuardian Replaces RLNightmareArtifactGuardian
{
	States
	{
	Spawn:
		NCYB A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS | MF_NODROPS | MF_NOWEAKEN)
		Goto Super::Spawn
	See:
		NCYB A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS | MF_NODROPS | MF_NOWEAKEN)
		Goto Super::See
	}
}

ACTOR RLAbominantArtifactGuardianRPG : RLAbominantArtifactGuardian Replaces RLAbominantArtifactGuardian
{
	States
	{
	Spawn:
		ABOM A 0 NoDelay ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS | MF_NODROPS | MF_NOWEAKEN)
		Goto Super::Spawn
	See:
		ABOM A 0 ACS_NamedExecuteAlways("MonsterInit", 0, MF_BOSS | MF_NODROPS | MF_NOWEAKEN)
		Goto Super::See
	}
}

// --------------------------------------------------------
// Copies for the One-Monster map event

ACTOR RLFormerHumanRPG : RLFormerHumanBattleRifleRPG {}
ACTOR RLFormerSergeantRPG : RLFormerSergeantShotgunRPG {}
ACTOR RLFormerCommandoRPG : RLFormerCommandoChaingunRPG {}
ACTOR RLFormerCaptainRPG : RLFormerCaptainPlasmaRifleRPG {}
ACTOR RLEliteHumanRPG : RLEliteHumanHandcannonRPG {}
ACTOR RLEliteSergeantRPG : RLEliteSergeantDoubleShotgunRPG {}
ACTOR RLEliteCommandoRPG : RLEliteCommandoMinigunRPG {}
ACTOR RLEliteCaptainRPG : RLEliteCaptainTristarBlasterRPG {}

// --------------------------------------------------
// GIBS
//

ACTOR DRPGRLGibbedStuff
{
    States
    {
    Spawn:
        TNT1 A 0 NoDelay A_Jump(256, "Gibs1", "Gibs2", "Gibs3", "Gibs4", "Gibs5", "Gibs6", "Gibs7", "Gibs8", "Gibs9", "Gibs10", "Gibs11", "Gibs12", "Gibs13", "Gibs14", "Gibs15", "Gibs16", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17", "Gibs17")
    Gibs1:
        ZHRF U -1
        Stop
    Gibs2:
        ZHR3 W -1
        Stop
    Gibs3:
        ZCCH T -1
        Stop
    Gibs4:
        IMP0 U -1
        Stop
    Gibs5:
        PDEM W -1
        Stop
    Gibs6:
        CACO Q -1
        Stop
    Gibs7:
        HKN2 I -1
        Stop
    Gibs8:
        BARO Y -1
        Stop
    Gibs9:
        REV2 F -1
        Stop
    Gibs10:
        MNC2 P -1
        Stop
    Gibs11:
        AVI2 H -1
        Stop
    Gibs12:
        NDEM W -1
        Stop
    Gibs13:
        NREX K -1
        Stop
    Gibs14:
        NVI2 L -1
        Stop
    Gibs15:
        CRIF W -1
        Stop
    Gibs16:
        CDEM V -1
        Stop
    Gibs17:
        ASOL O -1
        Stop
    }
}

ACTOR RLCrushedSmallRPG : RLCrushedSmall Replaces RLCrushedSmall
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCVar("drpg_corpses_cleanup") == 0, 2)
		TNT1 A 0 ACS_NamedExecuteAlways("CorpsesCleanup", 0)
		TNT1 A 0
		Goto Super::Spawn
	}
}

ACTOR RLCrushedMediumRPG : RLCrushedMedium Replaces RLCrushedMedium
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCVar("drpg_corpses_cleanup") == 0, 2)
		TNT1 A 0 ACS_NamedExecuteAlways("CorpsesCleanup", 0)
		TNT1 A 0
		Goto Super::Spawn
	}
}

ACTOR RLCrushedLargeRPG : RLCrushedLarge Replaces RLCrushedLarge
{
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(GetCVar("drpg_corpses_cleanup") == 0, 2)
		TNT1 A 0 ACS_NamedExecuteAlways("CorpsesCleanup", 0)
		TNT1 A 0
		Goto Super::Spawn
	}
}

// --------------------------------------------------
// MONSTER'S ADAPTIVE AMMO AND WEAPONS DROP
//

ACTOR RLFormerHumanPistolDropRPG : RLFormerHumanPistolDrop replaces RLFormerHumanPistolDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 1)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}

ACTOR RLFormerHumanBattleRifleDropRPG : RLFormerHumanBattleRifleDrop replaces RLFormerHumanBattleRifleDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 6)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}

ACTOR RLFormerSergeantShotgunDropRPG : RLFormerSergeantShotgunDrop replaces RLFormerSergeantShotgunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 2)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGShellSpawner")
		Stop
	}
}

ACTOR RLFormerSergeantCombatShotgunDropRPG : RLFormerSergeantCombatShotgunDrop replaces RLFormerSergeantCombatShotgunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 3)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGShellSpawner")
		Stop
	}
}

ACTOR RLFormerCommandoBattleRifleDropRPG : RLFormerCommandoBattleRifleDrop replaces RLFormerCommandoBattleRifleDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 6)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipBoxSpawner")
		Stop
	}
}

ACTOR RLFormerCommandoChaingunDropRPG : RLFormerCommandoChaingunDrop replaces RLFormerCommandoChaingunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 5)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipBoxSpawner")
		Stop
	}
}

ACTOR RLFormerCaptainPlasmaRifleDropRPG : RLFormerCaptainPlasmaRifleDrop replaces RLFormerCaptainPlasmaRifleDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 8)
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGCellSpawner")
		Stop
	}
}

ACTOR RLEliteHumanBattleRifleDropRPG : RLEliteHumanBattleRifleDrop replaces RLEliteHumanBattleRifleDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 6)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_DropItem("RLBattleRiflePickup")
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}

ACTOR RLEliteSergeantDoubleShotgunDropRPG : RLEliteSergeantDoubleShotgunDrop replaces RLEliteSergeantDoubleShotgunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 4)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_DropItem("RLDoubleShotgunPickup")
		TNT1 A 0 A_Jump(127, "AmmoDrop")
		TNT1 A 0 A_DropItem("DRPGShellBoxSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGShellSpawner")
		Stop
	}
}

ACTOR RLEliteHumanCombatPistolDropRPG : RLEliteHumanCombatPistolDrop replaces RLEliteHumanCombatPistolDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 1)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 5, 2)
		TNT1 A 0 A_DropItem("RLCombatPistolPickup", 1, 30)
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}

ACTOR RLEliteHumanHandcannonDropRPG : RLEliteHumanHandcannonDrop replaces RLEliteHumanHandcannonDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 1)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 10, 2)
		TNT1 A 0 A_DropItem("RLHandcannonPickup", 1, 30)
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}

ACTOR RLEliteHumanUziDropRPG : RLEliteHumanUziDrop replaces RLEliteHumanUziDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 6)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 15, 2)
		TNT1 A 0 A_DropItem("RLUziPickup", 1, 30)
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}

ACTOR RLEliteSergeantAssaultShotgunDropRPG : RLEliteSergeantAssaultShotgunDrop replaces RLEliteSergeantAssaultShotgunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 3)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 25, 2)
		TNT1 A 0 A_DropItem("RLAssaultShotgunPickup", 1, 30)
		TNT1 A 0 A_Jump(127, "AmmoDrop")
		TNT1 A 0 A_DropItem("DRPGShellBoxSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGShellSpawner")
		Stop
	}
}

ACTOR RLEliteSergeantPlasmaShotgunDropRPG : RLEliteSergeantPlasmaShotgunDrop replaces RLEliteSergeantPlasmaShotgunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 8)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 30, 2)
		TNT1 A 0 A_DropItem("RLPlasmaShotgunPickup", 1, 30)
		TNT1 A 0 A_DropItem("DRPGCellSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGCellSpawner")
		Stop
	}
}

ACTOR RLFormerOverwatchDropRPG : RLFormerOverwatchDrop replaces RLFormerOverwatchDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 4)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 40, 2)
		TNT1 A 0 A_DropItem("RLSuperShotgunPickup", 1, 20)
		TNT1 A 0 A_DropItem("DRPGShellSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGShellSpawner")
		Stop
	}
}

ACTOR RLEliteCommandoMinigunDropRPG : RLEliteCommandoMinigunDrop replaces RLEliteCommandoMinigunDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 5)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 40, 2)
		TNT1 A 0 A_DropItem("RLMinigunPickup", 1, 10)
		TNT1 A 0 A_DropItem("DRPGClipBoxSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipBoxSpawner")
		Stop
	}
}

ACTOR RLEliteCaptainTristarBlasterDropRPG : RLEliteCaptainTristarBlasterDrop replaces RLEliteCaptainTristarBlasterDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 9)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 45, 2)
		TNT1 A 0 A_DropItem("RLTristarBlasterPickup", 1, 10)
		TNT1 A 0 A_DropItem("DRPGCellPackSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGCellPackSpawner")
		Stop
	}
}

ACTOR RLFormerShocktrooperDropRPG : RLFormerShocktrooperDrop replaces RLFormerShocktrooperDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 ACS_NamedExecuteWithResult("DRPGWeaponSpawner", 5)
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_JumpIf(GetCVar("DRLA_weapondroptype") > 0, 2)
		TNT1 A 0 A_JumpIf(CallACS("GetAveragePlayerLevel") < 50, 2)
		TNT1 A 0 A_DropItem("RLHighPowerMinigunPickup", 1, 4)
		TNT1 A 0 A_DropItem("RLRandomPhaseDeviceSpawner", 1, 10)
		TNT1 A 0 A_DropItem("DRPGClipBoxSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipBoxSpawner")
		Stop
	}
}

ACTOR RLUACDefenceDroneDropRPG : RLUACDefenceDroneDrop replaces RLUACDefenceDroneDrop
{
	States
	{
	WeaponSpawner:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	WeaponDrop: // Drops for DRLA Arsenal + Monsterpack
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	AmmoDrop:
		TNT1 A 0 A_DropItem("DRPGClipSpawner")
		Stop
	}
}