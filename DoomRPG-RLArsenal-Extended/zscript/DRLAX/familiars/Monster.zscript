class DRLAX_ZombieManFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "grunt/sight";
        attacksound "grunt/attack";
    }

    uint extradamage;

    states
    {
        Spawn:
        ZHRF ABCD 8 FamiliarIdle();
        loop;
        Missile:
        ZHRF E 8 A_FaceTracer(0, 0);
        ZHRF F 0 A_StartSound(attacksound);
		ZHRF F 8 
        {
            A_FaceTracer(0, 0);
            FamiliarLineAttack(angle, pitch, random(20,40) * (extradamage + 1), "Bullet", "RLBulletPuff", 0);
        }//A_CustomBulletAttack(22.5, 0, 1, random(1,5)*3, "RLBulletPuff", 0, CBAF_NORANDOM);
        ZHRF F 0
        {
            if(CountInv("DRLAX_FamiliarKill") > 0)
            {
                FindNewTracer();

                if(tracer && !tracer.player)
                {
                    SetStateLabel("Missile");
                    extradamage++;
                    TakeInventory("DRLAX_FamiliarKill", 9999);
                    return;
                }
            }
            extradamage = 0;
            TakeInventory("DRLAX_FamiliarKill", 9999);
        }
        ZHRF E 8 A_FaceTracer;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 2) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(35, 60);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}


class DRLAX_ShotgunGuyFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "shotguy/sight";
        attacksound "shotguy/attack";
    }

    states
    {
        Spawn:
        ZSSH ABCD 8 FamiliarIdle();
        loop;
        Missile:
        ZSSH E 0
        {
            if(playeractor && plat && Distance2D(playeractor) > 128)
            {
                plat.Warp(playeractor, -8, 0, 32, flags:WARPF_NOCHECKPOSITION);
                SetOrigin(plat.pos, false);
            }
        }
        ZSSH E 10 A_FaceTracer(0, 0);
        ZSSH F 0 A_StartSound(attacksound);
		ZSSH F 10 
        {
            for(int i; i<3; i++)
            {
                ShotgunAttack(angle, pitch, random(10,30), "Bullet", "RLBulletPuff");
            }
        }//A_CustomBulletAttack(22.5, 0, 1, random(1,5)*3, "RLBulletPuff", 0, CBAF_NORANDOM);
        ZSSH E 10 A_FaceTracer;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && playeractor && playeractor.Distance2D(tracer) < 256)
        {
            SetStateLabel("Missile");
            attackcooldown = random(35, 80);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }

    void ShotgunAttack(double angle, double pitch, int damage, name damagetype, Class<Actor> puff)
    {
        FTranslatedLineTarget victim;
        LineAttack(angle, 5000, pitch, 0, damagetype, puff, LAF_TARGETISSOURCE, victim);

        if(victim.linetarget)
        {
            victim.linetarget.DamageMobj(self, playeractor, damage, damagetype, DMG_NO_PAIN);
            victim.linetarget.Thrust(Max(1, 20 - (victim.linetarget.mass / 90)), angle);
            //Console.PRintf("victim " .. victim.linetarget.getclassname());
        }
    }
}

class DRLAX_ChaingunGuyFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "chainguy/sight";
        attacksound "chainguy/attack";
    }

    states
    {
        Spawn:
        ZCCH ABCD 8 FamiliarIdle();
        loop;
        Missile:
        ReMissile:
        ZCCH FE 4 BRIGHT 
        {
            A_FaceTracer(0,0);
            A_StartSound(attacksound);

            FamiliarLineAttack(angle + frandom(-12.5, 12.5), pitch, random(4,8), "Bullet", "RLBulletPuff", true);
            //A_SpawnProjectile("DRLAX_ArachnotronFamiliarBall", 8, ptr:AAPTR_TRACER);
        }
		ZCCH F 1
        {
            if(attackcooldown >= 400)
            {
                return;
            }

            if(tracer && tracer.health > 0 && CheckSight(tracer))
            {
                SetStateLabel("ReMissile");
                attackcooldown += 15;
                return;
            }
        }
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown < 150 && random(0, 3) == 0)
        {
            SetStateLabel("Missile");
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}


class DRLAX_ImpFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "imp/sight";
    }

    states
    {
        Spawn:
        IMP0 ABCD 8 FamiliarIdle();
        loop;
        Missile:
        IMP0 EF 8 A_FaceTracer;
		IMP0 G 6 A_SpawnProjectile("DRLAX_ImpFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(35, 60);
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_ImpFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_ImpFamiliarPassive", false);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_ImpFamiliarPassive : DRLAX_FamiliarPassive
{
    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(!passive && damage > 0 && damageType == "Fire")
        {
            newdamage = damage * (1.0 + ((power + 1) * (0.10)));
            //Console.Printf("" .. power);
        }
    }
}

class DRLAX_ImpFamiliarBall : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 12;
        damagetype "Fire";
        SeeSound "imp/attack";
        DeathSound "imp/shotx";
    }

    states
    {
        Spawn:
        BAL1 AB 4 BRIGHT;
        Loop;
        Death:
        BAL1 CDE 6 BRIGHT;
        Stop;
    }
}


class DRLAX_DemonFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "demon/sight";
        attacksound "demon/melee";
        damagetype "Melee";
        species "Player";
    }

    bool diving;

    states
    {
        Spawn:
        PDEM ABCD 4 FamiliarIdle();
        loop;
        Missile:
        PDEM E 0 
        {
            diving = true;
            A_FaceTracer(0, 0);
            A_StartSound(attacksound);
            Vel3DFromAngle(30, angle, pitch);
        }
        PDEM EF 8; //A_FaceTracer;
		PDEM G 4; //A_SpawnProjectile("DRLAX_ImpFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
        PDEM G 4 A_Explode(BiteDamage(), 64, 0, 0, BiteDamage());
        PDEM D 2;
        PDEM D 0
        {
            diving = false;
        }
		Goto Spawn;
    }

    virtual uint BiteDamage()
    {
        return random(64, 128);
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 3) == 0 && Distance2D(tracer) < 200)
        {
            SetStateLabel("Missile");
            attackcooldown = random(1, 5);
        }
    }

    override void FamiliarTick()
    {
        if(!diving)
        {
            MoveToPlatform();
        }
        else
        {
            A_ScaleVelocity(0.70);
        }
    }

    override void FamiliarStart()
    {
        playeractor.speed += 0.15;
    }

    override void FamiliarEnd()
    {
        playeractor.speed -= 0.15;
    }
}


class DRLAX_SpectreFamiliar : DRLAX_DemonFamiliar
{
    Default
    {
        renderstyle "STYLE_OptFuzzy";
    }

    override void FamiliarIdle()
    {
        FindNewTracer();

        if(!tracer || tracer && tracer.health < 1 || tracer.player)
        {
            tracer = null;
            idletimer++;

            if(idletimer == 9)
            {
                angle = random(0,360);
                idletimer = 0;
            }

            return;
        }

        if(tracer)
        {
            FamiliarAction();
            A_Face(tracer);
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_SpectreFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_SpectreFamiliarPassive", false);
    }

    override uint BiteDamage()
    {
        return random(40, 50);
    }
}

class DRLAX_SpectreFamiliarPassive : DRLAX_FamiliarPassive
{
    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(owner && !passive && damage > 0 && source)
        {
            if(source.bISMONSTER && !source.target || source.CountInv("DRLAX_StartledDebuff") > 0)
            {
                newdamage = damage * (5 + power);
                source.GiveInventory("DRLAX_StartledDebuff", 1);
                source.TriggerPainChance(damageType, true);
            }
        }
    }
}


class DRLAX_StartledDebuff : Powerup
{
    Default
    {
        powerup.duration 2;
    }
}

class DRLAX_LostSoulFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        +BRIGHT;
        damagetype "Melee";
        seesound "skull/melee";
        attacksound "skull/melee";
        scale 0.40;
    }

    bool diving;
    uint xspeed;
    bool targethit;
    float targetangle;
    float targetpitch;

    states
    {
        Spawn:
        LSOL AABB 4 FamiliarIdle();
        loop;
        Missile:
        LSOL C 0 
        {
            diving = true;
            angle = targetangle;
            pitch = targetpitch;
            A_StartSound(attacksound, CHAN_VOICE, pitch:1.2);
            xspeed = 0;
            Vel3DFromAngle(5, angle, pitch);
            playeractor.A_AlertMonsters();
        }
        Charging:
        LSOL CCCCDDDD 1 
        {
            FLineTraceData RemoteRay;
            bool hit = LineTrace(
               angle,
               9 + (xspeed * 0.6),
               pitch,
               TRF_THRUSPECIES,
               offsetz: 8,
               data: RemoteRay
            );

            if(hit)
            {
                SetStateLabel("End");
                attackcooldown = random(35*2, 35*5);
                A_Stop();
                if(hit && RemoteRay.HitActor && RemoteRay.HitActor.bNORADIUSDMG && RemoteRay.HitActor != playeractor)
                {
                    RemoteRay.HitActor.DamageMobj(self, playeractor, 10 * xspeed, "Melee", DMG_NO_PAIN);
                }
                A_Explode(16 * xspeed, 64 + (xspeed * 1.4), 0, damagetype:"Melee");
                A_Quake(Min(9, xspeed * 0.5), 5, 0, xspeed * 10, "");
                DRLAX_LostSoulFamiliarTrail fx = DRLAX_LostSoulFamiliarTrail(Spawn("DRLAX_LostSoulFamiliarTrail", pos));
                fx.A_SetScale(1.2);
                fx.A_StartSound("misc/shockwaveboots");
                targethit = false;
                return;
            }
            
            if(GetAge() % 3 == 0)
            {
                xspeed++;
                A_ScaleVelocity(1.08);
                //hitbox.SetDamage(5 + xspeed);
            }
        }
        TNT1 A 0 A_SpawnItemEx("DRLAX_LostSoulFamiliarTrail", 0, 0, 4, xspeed, 0, 0, 180, flags:SXF_NOCHECKPOSITION);
        loop;
        End:
        LSOL ABAB 8;
        LSOL A 0
        {
            diving = false;
            attackcooldown = 35*6;
        }
        Goto Spawn;
    }

    override void FamiliarAction()
    {
    }


    override void FamiliarTick()
    {
        if(!diving)
        {
            MoveToPlatform();
        }

        if(attackcooldown == 10)
        {
            A_StartSound("marathon/teleportout", CHAN_VOICE);
            A_SoundPitch(CHAN_VOICE, 1.8);
        }

        if(attackcooldown == 1)
        {
            A_StopSound(CHAN_VOICE);
        }

        if(attackcooldown > 0 || playeractor.CountInv("DRLAX_LostSoulFamiliarCooldown") > 0)
        {
            targethit = false;
        }

        if(playeractor.player.buttons & BT_ALTATTACK)
        {
            FLineTraceData RemoteRay;
            bool hit = playeractor.LineTrace(
               playeractor.angle,
               99999999,
               playeractor.pitch,
               offsetz: playeractor.height-12,
               data: RemoteRay
            );
   
            targethit = true;

            if(attackcooldown == 0 && targethit && !diving && playeractor.CountInv("DRLAX_LostSoulFamiliarCooldown")  == 0)
            {
                SetOrigin(playeractor.pos + (0,0,38), false);
                if (hit)
                {
                    Vector3 diff = level.Vec3Diff(pos, RemoteRay.hitlocation).Unit();
                    targetangle = VectorAngle(diff.x, diff.y);
                    targetpitch = -atan2 (diff.Z, diff.XY.Length());
                }

            SetStateLabel("Missile");
            playeractor.GiveInventory("DRLAX_LostSoulFamiliarCooldown", 1);
            }
        }
    }
}

class DRLAX_LostSoulFamiliarTrail : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOGRAVITY;
        scale 0.25;
        Translation "112:127=80:95";
        Alpha 0.25;
        +FORCEXYBILLBOARD;
    }

    States
    {
        Spawn:
        SHOK ABCDEFGHIJKLMNOPQR 1 Bright A_FadeTo (0, 0.01, 1);
        stop;
    }
}

class DRLAX_LostSoulFamiliarCooldown : Powerup
{
    Default
    {
        powerup.duration 18;
    }
}

class DRLAX_CacodemonFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "caco/sight";
        radius 5;
    }

    states
    {
        Spawn:
        CACO A 8 FamiliarIdle();
        loop;
        Missile:
        CACO BC 5 A_FaceTracer;
		CACO D 5 bright A_SpawnProjectile("DRLAX_CacodemonFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 2) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(35, 60);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
        if(!playeractor)
        {
            return;
        }
        PlayerInfo p = playeractor.player;

        if(p && p.cmd.buttons & BT_JUMP && playeractor.vel.z < 0 && playeractor.health > 0)
        {
            playeractor.A_ChangeVelocity(0, 0, 0.82, CVF_RELATIVE);
        }
    }
}

class DRLAX_CacodemonFamiliarBall : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 13;
        damagetype "Plasma";
        SeeSound "caco/attack";
        DeathSound "caco/shotx";
    }

    states
    {
        Spawn:
        BAL2 AB 4 BRIGHT;
        Loop;
        Death:
        BAL2 CDE 6 BRIGHT;
        Stop;
    }
}

class DRLAX_HellKnightFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "knight/sight";
    }

    states
    {
        Spawn:
        HKNI ABCD 8 FamiliarIdle();
        loop;
        Missile:
        HKNI EF 8 A_FaceTracer;
		HKNI G 8 A_SpawnProjectile("DRLAX_HellKnightFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(70, 100);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();

        if((level.Time % 10) == 0)
        {
            ThinkerIterator ti = ThinkerIterator.Create("Powerup");
            Powerup p;
            while(p = Powerup(ti.Next()))
            {
                if(p.owner == playeractor)
                {
                    String c = p.GetClassName();

                    if(c.Left(7) == "PowerRL" && c.Mid(c.Length()-8, 8) == "Cooldown")
                    {
                        p.effecttics-=5;

                        if(p.effecttics < 0)
                        {
                            p.Destroy();
                            continue;
                        }
                    }
                }
            }
        }
    }
}

class DRLAX_HellKnightFamiliarBall : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 16;
        damagetype "Plasma";
        SeeSound "baron/attack";
        DeathSound "baron/shotx";
    }

    states
    {
        Spawn:
        BAL7 AB 4 BRIGHT;
        Loop;
        Death:
        BAL7 CDE 6 BRIGHT;
        Stop;
    }
}


class DRLAX_BaronOfHellFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "baron/sight";
    }

    states
    {
        Spawn:
        BARO ABCD 8 FamiliarIdle();
        loop;
        Missile:
        BARO EF 8 A_FaceTracer;
		BARO G 6 A_SpawnProjectile("DRLAX_HellKnightFamiliarBall", 8, ptr:AAPTR_TRACER); //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(70, 100);
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_BaronOfHellFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_BaronOfHellFamiliarPassive", false);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_BaronOfHellFamiliarPassive : DRLAX_FamiliarPassive
{
    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(owner && owner.CountInv("PowerRLBerserkResistance") > 0 && !passive && damage > 0)
        {
            newdamage = damage * (1.0 + ((power + 1) * (1.00)));
        }
    }
}


class DRLAX_RevenantFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "skeleton/sight";
    }

    states
    {
        Spawn:
        REVE ABCDEF 6 FamiliarIdle();
        loop;
        Missile:
        REVE J 10 BRIGHT A_FaceTracer;
		REVE K 10 A_SpawnProjectile("DRLAX_RevnantFamiliarMissile", 12, ptr:AAPTR_TRACER);
        REVE K 10 A_FaceTracer; //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 3) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(120, 200);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();

        if(playeractor)
        {
            playeractor.GiveInventory("RLFistComboTwo", 1);

            if((GetAge() % 15) == 0)
            {
                playeractor.GiveInventory("RLStamina", 1);
            }
        }
    }
}

class DRLAX_RevnantFamiliarMissile : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 32;
        +SEEKERMISSILE;
        damagetype "Fire";
        SeeSound "skeleton/attack";
        DeathSound "skeleton/tracex";
    }

    states
    {
        Spawn:
        FATB AB 2 BRIGHT A_SeekerMissile (9, 9,SMF_LOOK,128);//A_Tracer;
        Loop;
        Death:
        FBXP A 8 BRIGHT;
		FBXP B 6 BRIGHT;
		FBXP C 4 BRIGHT;
        Stop;
    }
}


class DRLAX_PainElementalFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "pain/sight";
        attacksound "skull/melee";
        radius 5;
    }

    states
    {
        Spawn:
        PELE ABC 8 FamiliarIdle();
        loop;
        Missile:
        PELE DE 5 BRIGHT
        {
            if(playeractor)
            {
                A_Face(playeractor);
            }
        }
		PELE FFF 8 BRIGHT
        {
            if(!playeractor || playeractor.health == 0)
            {
                return;
            }
            bool spawned;
            Actor act;
            [spawned, act] = A_SpawnItemEx("DRLAX_PainElementalShieldFX", 0, 0, 4, 10);
            if(spawned && act)
            {
                A_StartSound(attacksound, CHAN_VOICE);
                A_SoundPitch(CHAN_VOICE, 1.25);
                act.tracer = playeractor;
            }
        } //A_TroopAttack;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0 && playeractor && playeractor.CountInv("DRLAX_PainElementalShield") == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = 35 * 25;
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_PainElementalShieldFX : Actor
{
    Default
    {
        +NOINTERACTION;
        +DONTBLAST;
        +DONTREFLECT;
        height 2;
        radius 2;
        scale 0.6;
        speed 60;
        reactiontime 500;
        species "Player";
        Renderstyle "Translucent";
        alpha 0.45;
    }

    states
    {
        Spawn:
        LSOL CCCCDDDD 1 BRIGHT
        {
            A_SeekerMissile(90, 90, SMF_PRECISE);
            A_CountDown();
            if(tracer && tracer.health > 0 && tracer.player && Distance2D(tracer) < 32)
            {
                tracer.GiveInventory("DRLAX_PainElementalShield", 1);
                Destroy();
                return;
            }
        }
        loop;
        Death:
        LSOL F 6 BRIGHT A_Stop;
		LSOL G 6 BRIGHT;
		LSOL H 6 BRIGHT;
		LSOL I 6 BRIGHT;
		LSOL J 6;
		LSOL K 6;
		Stop;
    }
}

class DRLAX_PainElementalShield : Inventory
{
    DRLAX_PainElementalShieldSoul soul1, soul2, soul3;
    double wangle;

    override void Tick()
    {
        wangle+= 8;
        if(!owner)
        {
            Super.Tick();
            return;
        }

        if(owner.health < 1 || GetAge() > 35 * 15)
        {
            if(soul1)
            {
                soul1.A_Die();
            }
            if(soul2)
            {
                soul2.A_Die();
            }
            if(soul3)
            {
                soul3.A_Die();
            }
            Destroy();
            return;
        }

        if(GetAge() == 12)
        {
            soul1 = DRLAX_PainElementalShieldSoul(Spawn("DRLAX_PainElementalShieldSoul", owner.pos));
            soul2 = DRLAX_PainElementalShieldSoul(Spawn("DRLAX_PainElementalShieldSoul", owner.pos));
            soul3 = DRLAX_PainElementalShieldSoul(Spawn("DRLAX_PainElementalShieldSoul", owner.pos));
            soul1.tracer = owner;
            soul2.tracer = owner;
            soul3.tracer = owner;
        }

        if(GetAge() >= 12)
        {
            float dist = Min(GetAge()-12 * 0.01, 55);
            if(soul1 && soul1.health > 0)
            {
                soul1.Warp(owner, dist, 0, 25, wangle - owner.angle, WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_STOP);
                soul1.angle = owner.angle;
            }
            if(soul2 && soul2.health > 0)
            {
                soul2.Warp(owner, dist, 0, 25, wangle - owner.angle + 120, WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_STOP);
                soul2.angle = owner.angle;
            }
            if(soul3 && soul3.health > 0)
            {
                soul3.Warp(owner, dist, 0, 25, wangle - owner.angle + 240, WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_STOP);
                soul3.angle = owner.angle;
            }
        }
        Super.Tick();
    }
}

class DRLAX_PainElementalShieldSoul : Actor
{
    Default
    {
        +THRUSPECIES;
        species "Player";
        +SOLID;
        +SHOOTABLE;
        +DONTBLAST;
        +DONTREFLECT;
        +NOGRAVITY;
        +DONTTHRUST;
        +NOBLOOD;
        health 65;
        Renderstyle "Translucent";
        alpha 0.45;
        height 28;
        radius 32;
        scale 0.6;
        painchance 256;
        deathsound "skull/death";
    }

    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        if(source && source.player)
        {
            return 0;
        }

        return damage;
    }  

    states
    {
        Spawn:
        LSOL AAAAAAAAAABBBBBBBBBB 1 BRIGHT
        {
            if(!tracer)
            {
                A_Die();
            }
        }
        loop;
        Death:
        LSOL F 0 
        {
            A_StartSound(deathsound);
            bNOGRAVITY = true;
        }
        LSOL F 6 BRIGHT;
		LSOL G 6 BRIGHT;
		LSOL H 6 BRIGHT;
		LSOL I 6 BRIGHT;
		LSOL J 6;
		LSOL K 6;
		Stop;
    }   
}

class DRLAX_MancubusFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "fatso/sight";
        radius 7;
    }

    states
    {
        Spawn:
        MANC ABCDEF 10 FamiliarIdle();
        loop;
        Missile:
        MANC G 20 
        {
            A_FaceTracer();
            A_StartSound("fatso/raiseguns", CHAN_VOICE);
            A_SoundPitch(CHAN_VOICE, 1.5);
        }
		MANC H 10 BRIGHT 
        {
            A_SpawnProjectile("DRLAX_FatsoFamiliarShot", 8, 0, 0, ptr:AAPTR_TRACER);
            A_SpawnProjectile("DRLAX_FatsoFamiliarShot", 8, 0, -11.25, ptr:AAPTR_TRACER);
        }
		MANC IG 5 A_FaceTracer();
		MANC H 10 BRIGHT 
        {
            A_SpawnProjectile("DRLAX_FatsoFamiliarShot", 8, 0, 0, ptr:AAPTR_TRACER);
            A_SpawnProjectile("DRLAX_FatsoFamiliarShot", 8, 0, 11.25, ptr:AAPTR_TRACER);
        }
		MANC IG 5 A_FaceTracer();
		MANC H 10 BRIGHT 
        {
            A_SpawnProjectile("DRLAX_FatsoFamiliarShot", 8, 0, 5.625, ptr:AAPTR_TRACER);
            A_SpawnProjectile("DRLAX_FatsoFamiliarShot", 8, 0, 5.625, ptr:AAPTR_TRACER);
        }
		MANC IG 5 A_FaceTracer;
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 2) == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(200, 400);
        }
    }

    override void FamiliarStart()
    {
        playeractor.GiveInventory("DRLAX_FatsoFamiliarPassive", 1);
    }

    override void FamiliarEnd()
    {
        playeractor.TakeInventory("DRLAX_FatsoFamiliarPassive", 1);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_FatsoFamiliarPassive : Inventory
{
    Default
    {
        inventory.maxamount 6;
    }
}

class DRLAX_FatsoFamiliarShot : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 14;
        damagetype "Fire";
        SeeSound "fatso/attack";
        DeathSound "fatso/shotx";
    }

    states
    {
        Spawn:
        MANF AB 4 BRIGHT;
        Loop;
        Death:
        MISL B 8 BRIGHT;
        MISL C 6 BRIGHT;
        MISL D 4 BRIGHT;
        Stop;
    }
}

class DRLAX_ArachnotronFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "baby/sight";
        radius 7;
    }

    states
    {
        Spawn:
        ARAC AABBCCDDEEFF 6 FamiliarIdle();
        loop;
        ReMissile:
        Missile:
        ARAC G 4 BRIGHT 
        {
            A_FaceTracer();
            A_SpawnProjectile("DRLAX_ArachnotronFamiliarBall", 8, ptr:AAPTR_TRACER);
        }
		ARAC H 4 BRIGHT;
		ARAC H 1 BRIGHT 
        {
            if(attackcooldown >= 500)
            {
                return;
            }

            if(tracer && tracer.health > 0 && CheckSight(tracer))
            {
                SetStateLabel("Missile");
                attackcooldown += 27;
                return;
            }
            
            FindNewTracer();

            if(tracer && !tracer.player)
            {
                SetStateLabel("ReMissile");
                return;
            }
        }
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown < 100 && random(0, 3) == 0)
        {
            SetStateLabel("Missile");
        }
    }

    override void FamiliarStart()
    {
        GiveStackingPassive("DRLAX_ArachnotronFamiliarPassive", true);
    }

    override void FamiliarEnd()
    {
        GiveStackingPassive("DRLAX_ArachnotronFamiliarPassive", false);
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}

class DRLAX_ArachnotronFamiliarPassive : DRLAX_FamiliarPassive
{
    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(!passive && damage > 0 && damageType == "Plasma")
        {
            newdamage = damage * (1.0 + ((power + 1) * (0.10)));
        }
    }
}

class DRLAX_ArachnotronFamiliarBall : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 4;
        damagetype "Plasma";
        SeeSound "weapons/xaserplasma";
        DeathSound "baby/shotx";
    }

    states
    {
        Spawn:
        APLS AB 5 BRIGHT;
        Loop;
        Death:
        APBX ABCDE 5 BRIGHT;
        Stop;
    }
}


class DRLAX_ArchvileFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "vile/sight";
    }

    Actor firetarget;

    states
    {
        Spawn:
        VILE ABCDEF 6 FamiliarIdle();
        loop;
        Missile:
        VILE G 0 BRIGHT
        {
            if(tracer)
            {
                A_StartSound("vile/start", CHAN_7);
                
                firetarget = tracer;

                DRLAX_ArchvileFamiliarFire f = DRLAX_ArchvileFamiliarFire(Spawn("DRLAX_ArchvileFamiliarFire", tracer.pos));
                f.tracer = firetarget;
                f.fam = self;
            }
        } //A_VileStart;
		VILE G 10 BRIGHT FaceFireTarget();
		VILE H 8 BRIGHT; //A_VileTarget;
		VILE IJKLMN 8 BRIGHT FaceFireTarget();
		VILE O 8 BRIGHT 
        {
            if(firetarget && playeractor)
            {
                firetarget.DamageMobj(self, playeractor, random(120, 220), "Fire");
                firetarget.A_StartSound("vile/stop");
                if(firetarget.health < 1)
                {
                    firetarget.A_ChangeVelocity(0, 0, 10, CVF_RELATIVE);
                }
            }
        }
		VILE P 20 BRIGHT;
		Goto Spawn;
    }

    void FaceFireTarget()
    {
        if(firetarget)
        {
            A_Face(firetarget);
        }
        else
        {
            if(tracer)
            {
                A_Face(tracer);
            }
        }
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0 && random(0, 1) == 0 && tracer && CheckSight(tracer))
        {
            SetStateLabel("Missile");
            attackcooldown = random(120, 220);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();

        if(firetarget && firetarget.health < 1)
        {
            FindNewTracer();
            if(tracer)
            {
                firetarget = tracer;
            }
        }
    }

    override void FamiliarStart()
    {
        playeractor.GiveInventory("DRLAX_ArchvileFamiliarPassive", 1);
    }

    override void FamiliarEnd()
    {
        playeractor.TakeInventory("DRLAX_ArchvileFamiliarPassive", 1);
    }
}

class DRLAX_ArchvileFamiliarGhostCount : Inventory
{
    Default
    {
        inventory.maxamount 40;
    }

    Override void Tick()
    {
        If(GetAge() == 5)
        {
            Destroy();
            return;
        }
        Super.Tick();
    }
}

class DRLAX_ArchvileFamiliarFire : Actor
{
    Default
    {
        +NOBLOCKMAP;
        +NOGRAVITY;
    }

    DRLAX_ArchvileFamiliar fam;

    states
    {
        Spawn:
        FIRE A 2 bright FireWarp();
        FIRE BAB 2 bright FireWarp();
        FIRE C 2 bright 
        {
            A_StartSound("vile/firecrkl");
            FireWarp();
        }
        FIRE BCBCDCDCDEDED 2 bright FireWarp();
        FIRE E 2 bright 
        {
            A_StartSound("vile/firecrkl");
            FireWarp();
        }
        FIRE FEFEFGHGHGH 2 bright FireWarp();
        Stop;
    }

    void FireWarp()
    {
        if(fam && fam.firetarget)
        {
            Warp(fam.firetarget, 4, flags:WARPF_NOCHECKPOSITION);
        }
    }
}

class DRLAX_ArchvileFamiliarPassive : Inventory
{
    Default
    {
        inventory.maxamount 6;
    }
}

class DRLAX_ArchvileFamiliarGhost : Inventory
{
    uint dietime;

    override void Tick()
    {
        if(owner.health < 1 || GetAge() > 35 * 30)
        {
            dietime++;
        }

        if(dietime >= 40)
        {
            owner.A_SpawnItemEx("DRLAX_ArchvileFamiliarDeathFX", 0, 0, owner.height/2);
            owner.A_Remove(AAPTR_DEFAULT);
            return;
        }

        Super.Tick();
    }
}

class DRLAX_ArchvileFamiliarDeathFX : DRLAX_TrappedPowerupFX
{
    Default
    {
        +NOINTERACTION;
        alpha 0.5;
        translation "CMMDRLA_Greyscale";
    }
}

class DRLAX_CyberdemonFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "cyber/sight";
        radius 7;
        scale 0.18;
    }

    states
    {
        Spawn:
        VCYB ABCD 8 FamiliarIdle();
        loop;
        Missile:
        VCYB E 8 A_FaceTracer;
		VCYB F 12 A_SpawnProjectile("DRLAX_CyberdemonFamiliarRocket", 10, ptr:AAPTR_TRACER);
        VCYB E 12 A_FaceTracer;
		VCYB F 12 A_SpawnProjectile("DRLAX_CyberdemonFamiliarRocket", 10, ptr:AAPTR_TRACER);
        VCYB E 12 A_FaceTracer;
		VCYB F 12 A_SpawnProjectile("DRLAX_CyberdemonFamiliarRocket", 10, ptr:AAPTR_TRACER);
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown == 0)
        {
            SetStateLabel("Missile");
            attackcooldown = random(100, 240);
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}


class DRLAX_CyberdemonFamiliarRocket : DRLAX_FamiliarProjectile
{
    Default
    {
        Speed 20;
        Damage 10;
        damagetype "Fire";
        SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
        scale 0.6;
    }

    states
    {
        Spawn:
        MISL A 1 Bright;
        Loop;
        Death:
        TNT1 A 0 A_SetTranslucent (0.95, 1);
        MISL B 0 A_SetScale(1.0, 1.0);
        TNT1 A 0 A_Explode(128,128,0);
        MEXP A 1 Bright;
		MEXP B 1 Bright;
		MEXP C 2 Bright;
		MEXP D 2 Bright;
		MEXP E 3 Bright;
		MEXP F 4 Bright;
        Stop;
    }
}


class DRLAX_SpiderMastermindFamiliar : DRLAX_FamiliarBase
{
    Default
    {
        seesound "spider/sight";
        attacksound "spider/attack";
        radius 18;
        scale 0.18;
    }

    uint attackspd;

    states
    {
        Spawn:
        SMAS AABBCCDDEEFF 6 FamiliarIdle();
        loop;
        Missile:
        SMAS G 0
        {
            attackspd = 6;
        }
        ReMissile:
        SMAS G 6 BRIGHT 
        {
            float totals = Level.Total_Items + Level.Total_Monsters + Level.Total_Secrets;
            float value = Level.Found_Items + Level.Killed_Monsters + Level.Found_Secrets;

            float p = (value/totals);

            //Console.Printf("" .. p);

            attackspd = Max(1, 5 - (p * 6));

            //Console.Printf("" .. attackspd);

            A_SetTics(attackspd);
            A_FaceTracer(0,0);
            A_StartSound(attacksound);

            for(int i; i<3; i++)
            {
                FamiliarLineAttack(angle + frandom(-22.5, 22.5), pitch, random(6,12), "Bullet", "RLBulletPuff", 0);
            }
            //A_SpawnProjectile("DRLAX_ArachnotronFamiliarBall", 8, ptr:AAPTR_TRACER);
        }
		SMAS H 6 BRIGHT
        {
            A_SetTics(attackspd);
        }
		SMAS H 1 BRIGHT 
        {
            if(attackcooldown >= 500)
            {
                return;
            }

            if(tracer && tracer.health > 0 && CheckSight(tracer))
            {
                SetStateLabel("ReMissile");
                attackcooldown += 5 + (attackspd * 2);
                return;
            }

            FindNewTracer();

            if(tracer && !tracer.player)
            {
                SetStateLabel("ReMissile");
                return;
            }
        }
		Goto Spawn;
    }

    override void FamiliarAction()
    {
        if(attackcooldown < 250 && random(0, 3) == 0)
        {
            SetStateLabel("Missile");
        }
    }

    override void FamiliarTick()
    {
        MoveToPlatform();
    }
}
